(function() {var implementors = {};
implementors["lignin"] = [{"text":"impl From&lt;ThreadSafe&gt; for ThreadBound","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;CallbackRef&lt;ThreadSafe, T&gt;&gt; for CallbackRef&lt;ThreadBound, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R, T&gt; From&lt;&amp;'_ CallbackRegistration&lt;R, T&gt;&gt; for CallbackRef&lt;ThreadSafe, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R, T&gt; From&lt;&amp;'_ CallbackRegistration&lt;R, T&gt;&gt; for CallbackRef&lt;ThreadBound, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Element&lt;'a, ThreadSafe&gt;&gt; for Element&lt;'a, ThreadBound&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;EventBinding&lt;'a, ThreadSafe&gt;&gt; for EventBinding&lt;'a, ThreadBound&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Node&lt;'a, ThreadSafe&gt;&gt; for Node&lt;'a, ThreadBound&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;ReorderableFragment&lt;'a, ThreadSafe&gt;&gt; for ReorderableFragment&lt;'a, ThreadBound&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S1, S2&gt; From&lt;&amp;'a Element&lt;'a, S1&gt;&gt; for Node&lt;'a, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: ThreadSafety + Into&lt;S2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: ThreadSafety,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S1, S2&gt; From&lt;&amp;'a mut Element&lt;'a, S1&gt;&gt; for Node&lt;'a, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: ThreadSafety + Into&lt;S2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: ThreadSafety,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S1, S2&gt; From&lt;&amp;'a [Node&lt;'a, S1&gt;]&gt; for Node&lt;'a, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: ThreadSafety + Into&lt;S2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: ThreadSafety,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S1, S2&gt; From&lt;&amp;'a mut [Node&lt;'a, S1&gt;]&gt; for Node&lt;'a, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: ThreadSafety + Into&lt;S2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: ThreadSafety,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S&gt; From&lt;&amp;'a str&gt; for Node&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ThreadSafety,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S&gt; From&lt;&amp;'a mut str&gt; for Node&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ThreadSafety,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lignin_html"] = [{"text":"impl&lt;'a, S:&nbsp;ThreadSafety&gt; From&lt;Error&gt; for Error&lt;'a, S&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()