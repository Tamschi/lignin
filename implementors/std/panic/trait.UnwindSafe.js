(function() {var implementors = {};
implementors["lignin"] = [{"text":"impl&lt;R, C&gt; UnwindSafe for CallbackRegistration&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; UnwindSafe for CallbackRef&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DomRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Element","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HtmlElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SvgElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for Node&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for ReorderableFragment&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for Element&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ElementCreationOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for EventBinding&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventBindingOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadSafe","synthetic":true,"types":[]}];
implementors["lignin_dom"] = [{"text":"impl !UnwindSafe for DomDiffer","synthetic":true,"types":[]}];
implementors["lignin_html"] = [{"text":"impl&lt;'a, S&gt; UnwindSafe for Error&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rc_map"] = [{"text":"impl&lt;K, C, V, S&gt; UnwindSafe for RcHashMap&lt;K, C, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; UnwindSafe for Keys&lt;'a, K, C, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; UnwindSafe for Counts&lt;'a, K, C, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; !UnwindSafe for CountsMut&lt;'a, K, C, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; UnwindSafe for Values&lt;'a, K, C, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, C, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; UnwindSafe for Iter&lt;'a, K, C, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; !UnwindSafe for IterMut&lt;'a, K, C, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; UnwindSafe for Drain&lt;'a, K, C, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V, S&gt; !UnwindSafe for Entry&lt;'a, K, C, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for Decremented&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C, V&gt; !UnwindSafe for DrainWeak&lt;'a, K, C, V&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CountSaturatedError","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()